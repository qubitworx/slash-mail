// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo prisma"
  output   = "../apps/api/src/prisma.rs"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SMTPSettings {
  id        String @id @default(cuid())
  smtp_host String // SMTP server hostname
  smtp_port Int // SMTP server port
  smtp_user String
  smtp_pass String

  auth_protocol String // Can be LOGIN, PLAIN, CRAM, NONE
  tls           String // Can be NONE, STARTTLS, SSL
  helo_host     String // Hostname to use in HELO command
  smtp_from     String // Email address to use as the sender

  smtp_tls Boolean @default(true)

  max_connections Int // Number of connections to keep open
  max_retries     Int // Number of times to retry if sending fails
  idle_timeout    Int // Seconds
  wait_timeout    Int // Seconds

  custom_headers String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  List       List[]

  @@map("smtp_settings")
}

model Subscriber {
  id String @id @default(cuid())

  email String @unique
  name  String

  // We have a status over here so that we can blocklist emails from being sent to on a per-subscriber basis.
  status String // Can be "ENABLED", "BLOCKLISTED"
  data   String // Custom data

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  ListSubscriber   ListSubscriber[]
  ListConfirmation ListConfirmation[]

  @@map("subscribers")
}

model List {
  id String @id @default(cuid())

  name        String
  description String

  requires_confirmation Boolean @default(true)

  defaultSmtpSettings SMTPSettings?         @relation(fields: [sMTPSettingsId], references: [id], onDelete: Cascade)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  ListSubscriber      ListSubscriber[]
  CampaignToList      CampaignToList[]
  SubscribePageToList SubscribePageToList[]
  sMTPSettingsId      String?
  ListConfirmation    ListConfirmation[]

  @@map("lists")
}

model ListSubscriber {
  id String @id @default(cuid())

  // This is the status of the subscriber on the list.
  // Only if the subscriber is subscribed, they will receive emails from this list.
  status     String // Can be "SUBSCRIBED", "UNSUBSCRIBED", "BOUNCED", "UNCONFIRMED"
  list       List       @relation(fields: [listId], references: [id], onDelete: Cascade)
  subscriber Subscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  listId       String
  subscriberId String

  @@map("list_subscribers")
}

model CampaignToList {
  id String @id @default(cuid())

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  list     List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  campaignId String
  listId     String

  @@map("campaign_to_lists")
}

model Campaign {
  id String @id @default(cuid())

  name        String
  description String

  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  CampaignToList CampaignToList[]

  @@map("campaigns")
}

// A secret key can be used by an external service to send emails.
model SecretKeys {
  id String @id @default(cuid())

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  expires_at DateTime? // If null, never expires. Otherwise, expires at this time.

  @@map("secret_keys")
}

model SubscribePageToList {
  id String @id @default(cuid())

  subscribe SubscribePage @relation(fields: [subscribePageId], references: [id], onDelete: Cascade)
  list      List          @relation(fields: [listId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subscribePageId String
  listId          String

  @@map("subscribe_page_to_lists")
}

model SubscribePage {
  id String @id @default(cuid())

  title        String
  description  String
  primaryColor String
  slug         String

  defaultPage Boolean @default(false)

  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  SubscribePageToList SubscribePageToList[]

  @@map("subscribe_pages")
}

model Settings {
  id String @id @default(cuid())

  key   String // Can be "app_name", "app_url", "app_description", "app_logo_url"
  value String // The value of the setting

  created_at DateTime @default(now())

  @@map("settings")
}

model Media {
  id String @id @default(cuid())

  filename String @unique // Hello.png
  content  Bytes // Base64 encoded content

  created_at DateTime @default(now())

  @@map("media")
}

model ListConfirmation {
  id String @id @default(cuid())

  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  subscriber   Subscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId String

  created_at DateTime @default(now())
}

model Template {
  id String @id @default(cuid())

  ignoreDefaultTemplate Boolean @default(false)
  name                  String  @unique
  identifier            String  @unique

  content String
  json    String

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Campaign   Campaign[]
}
